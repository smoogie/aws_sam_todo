# Example yaml file
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: |
  todo-app
  Main SAM Template for todo app

# Param definition
Parameters:
  DBUser:
    Type: String
    NoEcho: true
    Description: 'your db user'
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters.'
  DBName:
    Type: String
    Description: 'your db name'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters.'
  DBPassword:
    Type: String
    NoEcho: true
    Description: 'your db password'
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: 'Must contain only alphanumeric characters.'

# Global configuration
Globals:
  Function:
    Runtime: nodejs8.10
    VpcConfig:
      SecurityGroupIds:
        - Ref: LambdaSecurityGroup
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
    Environment:
      Variables:
        DB_HOST:
          Fn::GetAtt: ToDoDB.Endpoint.Address
        DB_USER:
          Ref: DBUser
        DB_PASSWORD:
          Ref: DBPassword
        DB_NAME:
          Ref: DBName

# All resources
Resources:
  # VPC configuration
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  # Subnet for VPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MainVPC
      CidrBlock: 172.31.0.0/20
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MainVPC
      CidrBlock: 172.31.16.0/20
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MainVPC
      CidrBlock: 172.31.32.0/20
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MainVPC
      CidrBlock: 172.31.48.0/20
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MainVPC
      CidrBlock: 172.31.64.0/20
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MainVPC
      CidrBlock: 172.31.80.0/20
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
  # RouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MainVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MainVPC
  # Route Subnet association
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  # InternetGateway for VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MainVPC
      InternetGatewayId:
        Ref: InternetGateway
  # NAT and Elastic IP for VPC
  NAT:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId:
        Ref: PrivateSubnet1
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  # Route Subnet association
  RouteToInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  RouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT
  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Lambda security group'
      VpcId:
        Ref: MainVPC
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'RDS security group'
      VpcId:
        Ref: MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId :
            Ref: LambdaSecurityGroup
  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'DB subnet group'
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
  # RDS Configuration
  ToDoDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: 5.7.23
      PubliclyAccessible: true
      DBName:
        Ref: DBName
      MasterUsername:
        Ref: DBUser
      MasterUserPassword:
        Ref: DBPassword
      DeletionProtection: false
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Ref: RDSSecurityGroup

  #IAM configuration
  GetUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  VersionValidationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Cognito Configuration
  ToDoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ToDoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  # Lambda Configuration
  GetUserFunction:
    Type: AWS::Serverless::Function
    Name: 'get-user'
    Properties:
      Role:
        Fn::Sub: '${GetUserRole.Arn}'
      CodeUri: ./src
      Handler: actions/users/get_data.handler
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: ToDoApi
  VersionValidationFunction:
    Type: AWS::Serverless::Function
    Name: 'version-validate'
    Properties:
      Role:
        Fn::Sub: '${VersionValidationRole.Arn}'
      CodeUri: ./src
      Handler: actions/versions/validate.handler
      Events:
        AppVersionValidation:
          Type: Api
          Properties:
            Path: /version
            Method: get
            RestApiId:
              Ref: ToDoApi

  # Api gateway definition with swagger
  ToDoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Released
      Name: 'todo-app'
      Auth:
        Authorizers:
          ToDoCognitoAuthorizer:
            UserPoolArn:
              Fn::Sub: '${ToDoUserPool.Arn}'
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '0.1'
          title: 'Todo API'
        # cognito authorizer
        securityDefinitions:
          ToDoCognitoAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
        definitions:
          PassThroughTemplate: &PassThroughTemplate
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
              ##  This template will pass through all parameters including path, querystring,\
              \ header, stage variables, and context through to the integration endpoint\
              \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
              \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
              \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
              \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
              \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
              #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
              \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
              \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
              \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
              ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
              \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
              ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
              ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
              ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
              ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
              ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
              $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
              ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
              $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
              ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
              \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
              \n    }\n}\n"
          ErrorResponse:
            title: 'version response error'
            type: object
            required:
              - errors
            properties:
              errors:
                type: object
          VersionResponse:
            title: 'version response'
            type: object
            required:
              - accepted
            properties:
              accepted:
                type: bool
        paths:
          /user:
            get:
              security:
                - ToDoCognitoAuthorizer: []
              produces:
                - application/json
              responses:
                '200':
                  description: 'A JSON with info about user'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
          /version:
            get:
              produces:
                - application/json
              responses:
                '200':
                  description: 'A JSON with info about version validation'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/VersionResponse'
              parameters:
                - in: query
                  name: version
                  schema:
                    type: string
                  required: true
                  description: 'version id like 0.1, 1.1'
              summary: 'verify your version'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VersionValidationFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                passthroughBehavior: when_no_templates
                requestTemplates: *PassThroughTemplate
                httpMethod: POST
                type: aws
Outputs:
  ApiUri:
    Value: { "Fn::Sub" : "https://${ToDoApi}.execute-api.${AWS::Region}.amazonaws.com/Released"}
  DB:
    Value: { "Fn::GetAtt": ["ToDoDB","Endpoint.Address"]}