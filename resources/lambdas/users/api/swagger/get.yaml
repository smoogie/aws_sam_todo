paths:
  /:
    get:
      produces:
        - application/json
      responses:
        200:
          description: 'A JSON with info about user'
          headers:
            Access-Control-Allow-Origin:
              type: string
          content:
            application/json:
              schema:
                $ref: '#/definitions/UserProfileResponse'
        404:
          description: '404 response'
          headers:
            Access-Control-Allow-Origin:
              type: string
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        500:
          description: '500 response'
          headers:
            Access-Control-Allow-Origin:
              type: string
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations'
        responses:
          .*"statusCode":404.*:
            statusCode: '404'
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          .*"statusCode":500.*:
            statusCode: '500'
            responseTemplates:
              application/json: "$input.path('$.errorMessage')"
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "$input.path('$.body')"
        passthroughBehavior: when_no_templates
        requestTemplates:
          application/json: >
            #set($allParams = $input.params())
            {
            "context" : {
                "userId" : "$context.authorizer.principalId"
            }
            }